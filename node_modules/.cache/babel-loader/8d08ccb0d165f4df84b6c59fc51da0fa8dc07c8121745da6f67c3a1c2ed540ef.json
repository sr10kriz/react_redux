{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\learn\\\\redux\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport { useDispatch, useSelector } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  const dispatch = useDispatch();\n  const storeCounter = useSelector(state => state.counter);\n  console.log({\n    storeCounter\n  });\n  // useSelector hook is to access store state & get the store state,it accepts function as a 1st param,it gives the initial state snapshot from the store, it accepts second param also a function - equality function whether the component need to be re-render or not, soto say its check the state, if updated react trigger component to re-render, if not nothing happens... note: it will automatically done the subcriber function under the hood for us...\n  const increCount = () => {\n    dispatch({\n      type: \"increment\"\n    });\n  };\n  const decreCount = () => {\n    dispatch({\n      type: \"decrement\"\n    });\n  };\n  const increCountHun = () => {\n    dispatch({\n      type: \"increhun\",\n      val: 100\n    });\n  };\n  const decreCountHun = () => {\n    dispatch({\n      type: \"decrehun\",\n      val: 100\n    });\n  };\n  const toggleCount = () => {\n    dispatch({\n      type: \"toggle\"\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: storeCounter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increCount,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increCountHun,\n        children: \"Increment by 100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decreCount,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decreCountHun,\n        children: \"Decrement by 100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCount,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"Q5uklZdqKZP1GMdoKg1Z3+lrVUU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = Counter;\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["useDispatch","useSelector","classes","jsxDEV","_jsxDEV","Counter","_s","dispatch","storeCounter","state","counter","console","log","increCount","type","decreCount","increCountHun","val","decreCountHun","toggleCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["D:/react/learn/redux/src/components/Counter.js"],"sourcesContent":["import { useDispatch, useSelector } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  const dispatch = useDispatch();\n  const storeCounter = useSelector((state) => state.counter);\n  console.log({ storeCounter });\n  // useSelector hook is to access store state & get the store state,it accepts function as a 1st param,it gives the initial state snapshot from the store, it accepts second param also a function - equality function whether the component need to be re-render or not, soto say its check the state, if updated react trigger component to re-render, if not nothing happens... note: it will automatically done the subcriber function under the hood for us...\n  const increCount = () => {\n    dispatch({ type: \"increment\" });\n  };\n  const decreCount = () => {\n    dispatch({ type: \"decrement\" });\n  };\n\n  const increCountHun = () => {\n    dispatch({ type: \"increhun\", val: 100 });\n  };\n  const decreCountHun = () => {\n    dispatch({ type: \"decrehun\", val: 100 });\n  };\n  const toggleCount = () => {\n    dispatch({ type: \"toggle\" });\n  };\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{storeCounter}</div>\n      <div>\n        <button onClick={increCount}>Increment</button>\n        <button onClick={increCountHun}>Increment by 100</button>\n        <button onClick={decreCount}>Decrement</button>\n        <button onClick={decreCountHun}>Decrement by 100</button>\n      </div>\n      <button onClick={toggleCount}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n"],"mappings":";;AAAA,SAASA,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAMQ,YAAY,GAAGP,WAAW,CAAEQ,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC;EAC1DC,OAAO,CAACC,GAAG,CAAC;IAAEJ;EAAa,CAAC,CAAC;EAC7B;EACA,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACvBN,QAAQ,CAAC;MAAEO,IAAI,EAAE;IAAY,CAAC,CAAC;EACjC,CAAC;EACD,MAAMC,UAAU,GAAGA,CAAA,KAAM;IACvBR,QAAQ,CAAC;MAAEO,IAAI,EAAE;IAAY,CAAC,CAAC;EACjC,CAAC;EAED,MAAME,aAAa,GAAGA,CAAA,KAAM;IAC1BT,QAAQ,CAAC;MAAEO,IAAI,EAAE,UAAU;MAAEG,GAAG,EAAE;IAAI,CAAC,CAAC;EAC1C,CAAC;EACD,MAAMC,aAAa,GAAGA,CAAA,KAAM;IAC1BX,QAAQ,CAAC;MAAEO,IAAI,EAAE,UAAU;MAAEG,GAAG,EAAE;IAAI,CAAC,CAAC;EAC1C,CAAC;EACD,MAAME,WAAW,GAAGA,CAAA,KAAM;IACxBZ,QAAQ,CAAC;MAAEO,IAAI,EAAE;IAAS,CAAC,CAAC;EAC9B,CAAC;EAED,oBACEV,OAAA;IAAMgB,SAAS,EAAElB,OAAO,CAACQ,OAAQ;IAAAW,QAAA,gBAC/BjB,OAAA;MAAAiB,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBrB,OAAA;MAAKgB,SAAS,EAAElB,OAAO,CAACwB,KAAM;MAAAL,QAAA,EAAEb;IAAY;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnDrB,OAAA;MAAAiB,QAAA,gBACEjB,OAAA;QAAQuB,OAAO,EAAEd,UAAW;QAAAQ,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/CrB,OAAA;QAAQuB,OAAO,EAAEX,aAAc;QAAAK,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzDrB,OAAA;QAAQuB,OAAO,EAAEZ,UAAW;QAAAM,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/CrB,OAAA;QAAQuB,OAAO,EAAET,aAAc;QAAAG,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtD,CAAC,eACNrB,OAAA;MAAQuB,OAAO,EAAER,WAAY;MAAAE,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjD,CAAC;AAEX,CAAC;AAACnB,EAAA,CAnCID,OAAO;EAAA,QACML,WAAW,EACPC,WAAW;AAAA;AAAA2B,EAAA,GAF5BvB,OAAO;AAqCb,eAAeA,OAAO;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}