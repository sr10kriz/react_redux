{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\learn\\\\redux\\\\src\\\\components\\\\Counter.js\",\n  _s = $RefreshSig$();\nimport { useSelector } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Counter = () => {\n  _s();\n  const storeCounter = useSelector(state => state.counter);\n  // useSelector hook is to access store state & get the store state,it accepts function as a 1st param,it gives the initial state snapshot from the store, it accepts second param also a function - equality function whether the component need to be re-render or not, soto say its check the state, if updated react trigger component to re-render, if not nothing happens...\n  const increCount = () => {};\n  const decreCount = () => {};\n  const toggleCounterHandler = () => {};\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    className: classes.counter,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Redux Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.value,\n      children: storeCounter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: increCount,\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: decreCount,\n        children: \"Decrement\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: toggleCounterHandler,\n      children: \"Toggle Counter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n};\n_s(Counter, \"y+UgXyTkCYRNA7GlL9z4RiIvRyM=\", false, function () {\n  return [useSelector];\n});\n_c = Counter;\nexport default Counter;\nvar _c;\n$RefreshReg$(_c, \"Counter\");","map":{"version":3,"names":["useSelector","classes","jsxDEV","_jsxDEV","Counter","_s","storeCounter","state","counter","increCount","decreCount","toggleCounterHandler","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onClick","_c","$RefreshReg$"],"sources":["D:/react/learn/redux/src/components/Counter.js"],"sourcesContent":["import { useSelector } from \"react-redux\";\nimport classes from \"./Counter.module.css\";\n\nconst Counter = () => {\n  const storeCounter = useSelector((state) => state.counter);\n  // useSelector hook is to access store state & get the store state,it accepts function as a 1st param,it gives the initial state snapshot from the store, it accepts second param also a function - equality function whether the component need to be re-render or not, soto say its check the state, if updated react trigger component to re-render, if not nothing happens...\n  const increCount = () => {};\n  const decreCount = () => {};\n  const toggleCounterHandler = () => {};\n\n  return (\n    <main className={classes.counter}>\n      <h1>Redux Counter</h1>\n      <div className={classes.value}>{storeCounter}</div>\n      <div>\n        <button onClick={increCount}>Increment</button>\n        <button onClick={decreCount}>Decrement</button>\n      </div>\n      <button onClick={toggleCounterHandler}>Toggle Counter</button>\n    </main>\n  );\n};\n\nexport default Counter;\n"],"mappings":";;AAAA,SAASA,WAAW,QAAQ,aAAa;AACzC,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAMC,YAAY,GAAGN,WAAW,CAAEO,KAAK,IAAKA,KAAK,CAACC,OAAO,CAAC;EAC1D;EACA,MAAMC,UAAU,GAAGA,CAAA,KAAM,CAAC,CAAC;EAC3B,MAAMC,UAAU,GAAGA,CAAA,KAAM,CAAC,CAAC;EAC3B,MAAMC,oBAAoB,GAAGA,CAAA,KAAM,CAAC,CAAC;EAErC,oBACER,OAAA;IAAMS,SAAS,EAAEX,OAAO,CAACO,OAAQ;IAAAK,QAAA,gBAC/BV,OAAA;MAAAU,QAAA,EAAI;IAAa;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACtBd,OAAA;MAAKS,SAAS,EAAEX,OAAO,CAACiB,KAAM;MAAAL,QAAA,EAAEP;IAAY;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACnDd,OAAA;MAAAU,QAAA,gBACEV,OAAA;QAAQgB,OAAO,EAAEV,UAAW;QAAAI,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/Cd,OAAA;QAAQgB,OAAO,EAAET,UAAW;QAAAG,QAAA,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5C,CAAC,eACNd,OAAA;MAAQgB,OAAO,EAAER,oBAAqB;MAAAE,QAAA,EAAC;IAAc;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1D,CAAC;AAEX,CAAC;AAACZ,EAAA,CAlBID,OAAO;EAAA,QACUJ,WAAW;AAAA;AAAAoB,EAAA,GAD5BhB,OAAO;AAoBb,eAAeA,OAAO;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}