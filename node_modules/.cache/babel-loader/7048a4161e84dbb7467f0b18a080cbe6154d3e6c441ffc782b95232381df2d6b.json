{"ast":null,"code":"import { createStore } from \"redux\";\nconst initialState = {\n  counter: 0,\n  showCount: true\n};\nconst storeReducer = (state = initialState, action) => {\n  if (action.type === \"increment\") {\n    return {\n      counter: state.counter + 1,\n      showCount: state.showCount\n    };\n  }\n  if (action.type === \"decrement\") {\n    return {\n      counter: state.counter - 1,\n      showCount: state.showCount\n    };\n  }\n  if (action.type === \"increhun\") {\n    return {\n      counter: state.counter + action.val,\n      showCount: state.showCount\n    };\n  }\n  if (action.type === \"decrehun\") {\n    return {\n      counter: state.counter - action.val,\n      showCount: state.showCount\n    };\n  }\n  if (action.type === \"toggle\") {\n    return {\n      counter: state.counter,\n      showCount: !state.showCount\n    };\n  }\n  return state;\n\n  // note: the object we returned in reducer function it always create a brand new object not affect the existing one or cant be merged with the existing one, means we overwrite the old state not updates the old state\n  // its super important in redux you will never mutates the existing state, only you can overwrite the existing state only a good practice, even though if we mutates the existing state it will working fine but its not a best practice\n  // this is something you absolutely you cant do while working with redux\n};\n\nconst store = createStore(storeReducer);\nexport default store;","map":{"version":3,"names":["createStore","initialState","counter","showCount","storeReducer","state","action","type","val","store"],"sources":["D:/react/learn/redux/src/store/store.js"],"sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst initialState = { counter: 0, showCount: true };\r\n\r\nconst storeReducer = (state = initialState, action) => {\r\n  if (action.type === \"increment\") {\r\n    return { counter: state.counter + 1, showCount: state.showCount };\r\n  }\r\n  if (action.type === \"decrement\") {\r\n    return { counter: state.counter - 1, showCount: state.showCount };\r\n  }\r\n  if (action.type === \"increhun\") {\r\n    return { counter: state.counter + action.val, showCount: state.showCount };\r\n  }\r\n  if (action.type === \"decrehun\") {\r\n    return { counter: state.counter - action.val, showCount: state.showCount };\r\n  }\r\n  if (action.type === \"toggle\") {\r\n    return {\r\n      counter: state.counter,\r\n      showCount: !state.showCount,\r\n    };\r\n  }\r\n\r\n  return state;\r\n\r\n  // note: the object we returned in reducer function it always create a brand new object not affect the existing one or cant be merged with the existing one, means we overwrite the old state not updates the old state\r\n  // its super important in redux you will never mutates the existing state, only you can overwrite the existing state only a good practice, even though if we mutates the existing state it will working fine but its not a best practice\r\n  // this is something you absolutely you cant do while working with redux\r\n};\r\n\r\nconst store = createStore(storeReducer);\r\n\r\nexport default store;\r\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AAEnC,MAAMC,YAAY,GAAG;EAAEC,OAAO,EAAE,CAAC;EAAEC,SAAS,EAAE;AAAK,CAAC;AAEpD,MAAMC,YAAY,GAAGA,CAACC,KAAK,GAAGJ,YAAY,EAAEK,MAAM,KAAK;EACrD,IAAIA,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;MAAEC,SAAS,EAAEE,KAAK,CAACF;IAAU,CAAC;EACnE;EACA,IAAIG,MAAM,CAACC,IAAI,KAAK,WAAW,EAAE;IAC/B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAG,CAAC;MAAEC,SAAS,EAAEE,KAAK,CAACF;IAAU,CAAC;EACnE;EACA,IAAIG,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAGI,MAAM,CAACE,GAAG;MAAEL,SAAS,EAAEE,KAAK,CAACF;IAAU,CAAC;EAC5E;EACA,IAAIG,MAAM,CAACC,IAAI,KAAK,UAAU,EAAE;IAC9B,OAAO;MAAEL,OAAO,EAAEG,KAAK,CAACH,OAAO,GAAGI,MAAM,CAACE,GAAG;MAAEL,SAAS,EAAEE,KAAK,CAACF;IAAU,CAAC;EAC5E;EACA,IAAIG,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE;IAC5B,OAAO;MACLL,OAAO,EAAEG,KAAK,CAACH,OAAO;MACtBC,SAAS,EAAE,CAACE,KAAK,CAACF;IACpB,CAAC;EACH;EAEA,OAAOE,KAAK;;EAEZ;EACA;EACA;AACF,CAAC;;AAED,MAAMI,KAAK,GAAGT,WAAW,CAACI,YAAY,CAAC;AAEvC,eAAeK,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}